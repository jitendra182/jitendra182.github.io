{"version":3,"sources":["screens/Header.jsx","screens/About.jsx","screens/Home.jsx","screens/Contact.jsx","screens/Resume.jsx","screens/Notfound.jsx","screens/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","expand","Brand","as","NavLink","to","Toggle","aria-controls","Collapse","id","Nav","className","Link","About","Home","Contact","Resume","Notfound","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQA0BeA,MAnBf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MACtC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,GAAIC,IAASC,GAAG,KAA9B,YACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUT,GAAIC,IAASC,GAAG,KAA1B,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUT,GAAIC,IAASC,GAAG,WAA1B,UACA,kBAACK,EAAA,EAAIE,KAAL,CAAUT,GAAIC,IAASC,GAAG,UAA1B,SACA,kBAACK,EAAA,EAAIE,KAAL,CAAUT,GAAIC,IAASC,GAAG,YAA1B,gB,qBCRGQ,MARf,WACI,OACI,6BACI,4CCKGC,MARf,WACI,OACI,6BACI,sCCKGC,MARf,WACI,OACI,6BACI,iDCKGC,MARf,WACI,OACI,6BACI,gDCKGC,MARf,WACI,OACI,6BACI,2CCOGC,MAVf,WACI,OACI,oCACI,4BAAQP,UAAU,8BACd,qGCwBDQ,MAlBf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,OAAO,EAAMC,KAAK,IAAIC,UAAWR,IACxC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWT,IAChC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,UAAWP,IAClC,kBAAC,IAAD,CAAOM,KAAK,UAAUC,UAAWN,IACjC,kBAAC,IAAD,CAAOM,UAAWL,KAEpB,kBAAC,EAAD,SCZYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1dbfa37e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n} from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand as={NavLink} to=\"/\">Jitendra</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link as={NavLink} to='/'>Home</Nav.Link>\r\n            <Nav.Link as={NavLink} to='/resume'>Resume</Nav.Link>\r\n            <Nav.Link as={NavLink} to='/about'>About</Nav.Link>\r\n            <Nav.Link as={NavLink} to='/contact'>Contact</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1>About Page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div>\r\n            <h1>This is Contact</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\n\r\nfunction Resume() {\r\n    return (\r\n        <div>\r\n            <h1>This is Resume</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resume\r\n","import React from 'react'\r\n\r\nfunction Notfound() {\r\n    return (\r\n        <div>\r\n            <h1>Not Found</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notfound\r\n","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <>\r\n            <footer className=\"w-100 bg-light text-center\">\r\n                <p>Â© 2020 JitendraNayak. All Rights Reserved | Terms and Conditions</p>\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from \"react\";\nimport Header from \"./screens/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Styles.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport About from \"./screens/About\";\nimport Home from \"./screens/Home\";\nimport Contact from \"./screens/Contact\";\nimport Resume from \"./screens/Resume\";\nimport Notfound from \"./screens/Notfound\";\nimport Footer from \"./screens/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Header />\n        <Switch>\n          <Route exact={true} path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/resume\" component={Resume} />\n          <Route component={Notfound} />\n        </Switch>\n        <Footer />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}